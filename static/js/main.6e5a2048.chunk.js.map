{"version":3,"sources":["components/card/card.component.jsx","components/card-list/cardlist-component.jsx","components/search-box/search-cox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","bind","fetch","then","response","json","users","setState","event","this","target","value","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAKaA,EAAO,SAACC,GAClB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACrB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCLKC,G,MAAW,SAAAR,GACxB,OAAO,qBAAKC,UAAU,YAAf,SAEAD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJdM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAErC,OAAO,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCsExEG,G,wDApEb,aAAe,IAAD,8BACZ,gBAGKC,MAAQ,CAEXR,SAAU,GACVS,YAAa,IAIf,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBAXR,E,qDAiBd,WAAoB,IAAD,OAEjBC,MAAM,8CAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAG,EAAKC,SAAS,CAAEhB,SAAUe,S,0BAI1C,SAAcE,GACZC,KAAKF,SAAS,CAAEP,YAAaQ,EAAME,OAAOC,U,oBAO5C,WAAQ,MAK4BF,KAAKV,MAA/BR,EALF,EAKEA,SAAUS,EALZ,EAKYA,YAKZY,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASf,EAAYc,kBAEpD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDAQC,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcc,KAAKd,eAG7D,cAAC,EAAD,CAAUJ,SAAUqB,W,GA/DRI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6e5a2048.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.styles.css'\r\n\r\n\r\n\r\nexport const Card = (props) => {\r\n   return <div className='card-container'>\r\n       <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2> {props.monster.name} </h2>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n}","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => {\r\nreturn <div className=\"card-list\">\r\n    {/* change state to props, the element property has the state already being used as prop , see App.js / card.component.jsx*/}\r\n      {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster}/>\r\n      ))}\r\n</div>\r\n};","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    \r\n    return <input className='search' type=\"search\" placeholder={placeholder} onChange={handleChange} \r\n      \r\n      />\r\n}","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport { CardList } from './components/card-list/cardlist-component';\nimport { SearchBox } from './components/search-box/search-cox.component';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    //state management of data trickles down to the attribute\n    this.state = {\n      //state = empty array\n      monsters: [],\n      searchField: ''\n      // searchField:''     \n    };\n    //bind handlechange function to state\n    this.handleChange = this.handleChange.bind(this)\n   // this.handleChange = this.handleChange.bind(this);\n  }\n\n  //mount and load data from remote endpoint (Api)\n\n  componentDidMount(){\n    //fetch users\n    fetch('https://jsonplaceholder.typicode.com/users')\n    //fetch response and then set new state for monsters empty array\n    .then(response => response.json())\n    //fetch users ad push to array name monster\n    .then(users=> this.setState({ monsters: users}))\n\n  }\n\n  handleChange (event) {\n    this.setState({ searchField: event.target.value })\n  }\n\n  // onSearchChange = e => {\n\n  // }\n  \n  render(){\n    //destructuring, making two constants\n    // const monsters = this.state\n    //const searchField = this.state\n\n    const { monsters, searchField } = this.state;\n    //search filter monster name / case unsentitive\n    //include monster.name into search field\n    //re render everytime theres a change onChange\n    \n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      {/* search component */}\n      {/* <input type=\"search\" placeholder='search monsters' onChange={event => {\n             \n        this.setState({ searchField: event.target.value })} \n      }\n      /> */}\n         \n       <SearchBox placeholder=\"search monsters\" handleChange={this.handleChange} />\n      {/* enter cardlist component , the prop being used here */}\n      {/* instead of passing state monsters, pass filtered monsters */}\n      <CardList monsters={filteredMonsters} />\n      \n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}